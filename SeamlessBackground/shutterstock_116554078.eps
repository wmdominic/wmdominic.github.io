%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 14.0.0
%%For: (justas) ()
%%Title: (25colorseamless.eps)
%%CreationDate: 10/24/2012 2:02 PM
%%Canvassize: 16383
%%BoundingBox: -1 0 596 596
%%HiResBoundingBox: -0.000488 0 595.2764 595.2754
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 298.5 296.7803 298.5 296.7803
%AI3_TileBox: -0.02002 -123.3203 595.2998 718.6001
%AI3_DocumentPreview: Header
%AI5_ArtSize: 595.2803 595.2803
%AI5_RulerUnits: 4
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -246 744.2803 1 1096 872 26 0 0 44 119 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 28.3465 1 28.3465 1 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (New Pattern Swatch 12)
(New Pattern Swatch 12) 0 0 595.2769 595.2754 [
%AI3_Tile
(0 O 0 R 0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
 0.000031 0.000031 0.000031 0.000031 1 1 1 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 595.2754 m
0 0 L
595.2769 0 L
595.2769 595.2754 L
0 595.2754 L
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.733181 0.152529 0.012085 0.000031 0 0.658824 0.870588 Xa
 0.733181 0.152529 0.012085 0.000031 0 0.658824 0.870588 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
496.5562 151.8232 m
483.8179 151.8232 470.1968 151.4424 457.4224 148.9316 c
455.7681 142.3311 453.9751 135.7656 452.0298 129.2422 c
448.8394 118.5439 445.8101 107.6055 440.9702 97.5068 c
436.3765 87.9238 430.1753 78.791 421.4185 72.541 c
414.6245 67.6914 406.9985 64.7764 399.0259 62.9482 c
398.98 62.3828 398.9341 61.8193 398.8901 61.2559 c
397.4272 42.6709 397.6802 23.9707 398.5552 5.33887 c
408.2134 3.78516 417.9585 2.28711 427.4849 0 C
398.8218 0 L
398.8218 0 L
595.2769 0 L
583.1948 0 l
587.0298 1.86816 591.0835 3.34863 595.2769 4.54004 C
595.2769 79.084 l
587.4263 82.3193 580.5405 87.667 575.6118 94.6455 c
572.2378 99.4229 570.0112 104.499 567.5356 109.7441 c
565.3911 114.291 562.8003 118.8066 561.8804 123.8008 c
559.7388 132.1631 557.6597 140.5654 555.7524 149.0059 c
553.3599 149.2002 550.9712 149.3906 548.5874 149.5879 c
532.7124 150.9043 516.7935 151.7295 500.8608 151.8105 c
499.4409 151.8174 498.0015 151.8232 496.5562 151.8232 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.351965 0.701686 0.000031 0.000031 0.662745 0.403922 0.666667 Xa
 0.351965 0.701686 0.000031 0.000031 0.662745 0.403922 0.666667 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
219.3911 450.9766 m
216.7549 450.9766 214.1206 450.9575 211.4849 450.918 c
198.5786 450.7251 184.52 450.314 171.2593 447.8057 c
169.6387 439.1465 167.8564 430.4634 164.9111 422.1802 c
161.3501 412.168 156.144 402.4331 148.0913 395.2974 c
138.9849 387.2256 127.6836 383.0566 115.9678 380.3379 c
115.0889 380.1338 114.2056 379.9365 113.3232 379.7471 c
112.3408 372.5771 111.7646 365.3716 111.3535 358.333 c
110.4448 342.8008 110.731 327.2134 111.5762 311.6621 c
114.1924 311.7852 116.8096 311.856 119.4248 311.856 c
119.75 311.856 120.0757 311.8545 120.4004 311.8525 c
137.6821 311.7344 152.9639 305.959 162.0107 290.459 c
173.2573 271.1885 177.563 248.1406 180.126 225.9951 c
187.8125 225.0889 195.542 224.4131 203.2329 223.8633 c
211.0996 223.3008 219.0527 222.9717 227.0195 222.9717 c
230.958 222.9717 234.9009 223.0518 238.8384 223.2236 c
242.4941 238.6709 247.5693 254.2432 256.314 267.3682 c
269.8896 287.7422 291.8276 292.9805 314.4673 292.9805 c
321.1147 292.9805 327.8208 292.5283 334.395 291.876 c
335.2095 296.7388 335.8833 301.6274 336.5942 306.4736 c
338.4038 318.8086 339.686 331.209 340.5327 343.6484 c
341.3071 355.0366 341.8462 366.8618 341.3237 378.6006 c
333.6919 379.3755 326.104 380.4492 318.6177 381.7305 c
307.2593 383.6743 295.8438 385.9082 284.6709 388.7485 c
275.3662 391.1118 265.981 393.98 257.9648 399.436 c
250.147 404.7568 244.061 412.3862 240.8301 421.3086 c
238.8384 426.8086 238.0337 432.292 237.0322 438.0059 c
236.2974 442.2061 235.2466 446.4697 235.2085 450.7549 c
229.938 450.8999 224.6636 450.9766 219.3911 450.9766 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.598413 0.000031 0.807492 0.000031 0.427451 0.752941 0.396078 Xa
 0.598413 0.000031 0.807492 0.000031 0.427451 0.752941 0.396078 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
334.395 291.876 m
333.354 285.6563 332.0825 279.4775 330.2085 273.4785 c
327.0396 263.3359 322.2144 253.4063 314.4468 245.9629 c
305.6597 237.543 294.5288 232.9375 282.9282 229.7656 c
268.6069 225.8486 253.7583 223.877 238.8384 223.2236 c
238.0215 219.7744 237.2764 216.332 236.5762 212.9229 c
233.3574 197.2549 231.3804 181.3467 229.9746 165.3975 c
236.3477 166.2422 242.7417 166.9082 249.146 167.1377 c
250.062 167.1709 250.9707 167.1875 251.8765 167.1875 c
268.0444 167.1875 282.4468 161.8389 291.6333 147.541 c
305.105 126.5654 310.1245 100.5107 313.6519 76.2041 c
314.1841 72.5391 314.6772 68.8691 315.1304 65.1943 c
331.7397 61.8887 348.8149 59.7266 365.8042 59.7266 c
373.2007 59.7266 380.5796 60.1357 387.8999 61.0391 c
391.6499 61.502 395.3745 62.1113 399.0259 62.9482 c
400.5503 81.4541 403.3657 100.9805 411.7388 117.7246 c
421.2349 136.7168 438.3823 145.1895 457.4224 148.9316 c
458.7974 154.4199 460.0767 159.9316 461.2681 165.4648 c
464.481 180.3848 467.3892 196.1387 467.856 211.7734 c
465.9771 211.7764 464.0962 211.7939 462.2202 211.8291 c
452.6216 212.0088 442.8296 212.6611 433.7808 216.1436 c
424.9546 219.542 417.2886 225.5811 412.1079 233.5322 c
408.9136 238.4307 406.8784 243.5869 404.6011 248.9209 c
402.6274 253.5439 400.2065 258.1533 399.4741 263.1787 c
398.1069 269.4873 396.7769 275.8135 395.5269 282.1602 c
380.1108 285.3838 364.5903 288.1338 348.9692 290.1621 c
344.2437 290.7764 339.3569 291.3838 334.395 291.876 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.875364 0.271458 0.787045 0.127657 0 0.494118 0.345098 Xa
 0.875364 0.271458 0.787045 0.127657 0 0.494118 0.345098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
457.4224 148.9316 m
438.3823 145.1895 421.2349 136.7168 411.7388 117.7246 c
403.3657 100.9805 400.5503 81.4541 399.0259 62.9482 c
406.9985 64.7764 414.6245 67.6914 421.4185 72.541 c
430.1753 78.791 436.3765 87.9238 440.9702 97.5068 c
445.8101 107.6055 448.8394 118.5439 452.0298 129.2422 c
453.9751 135.7656 455.7681 142.3311 457.4224 148.9316 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.659052 0.52755 0.664271 0.402869 0.282353 0.305882 0.262745 Xa
 0.659052 0.52755 0.664271 0.402869 0.282353 0.305882 0.262745 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
314.4673 292.9805 m
291.8276 292.9805 269.8896 287.7422 256.314 267.3682 c
247.5693 254.2432 242.4941 238.6709 238.8384 223.2236 c
253.7583 223.877 268.6069 225.8486 282.9282 229.7656 c
294.5288 232.9375 305.6597 237.543 314.4468 245.9629 c
322.2144 253.4063 327.0396 263.3359 330.2085 273.4785 c
332.0825 279.4775 333.354 285.6563 334.395 291.876 c
327.8208 292.5283 321.1147 292.9805 314.4673 292.9805 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.35346 0.000336 0.992523 0.000031 0.698039 0.823529 0.207843 Xa
 0.35346 0.000336 0.992523 0.000031 0.698039 0.823529 0.207843 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
322.1353 13 m
321.0015 13 319.8687 12.9893 318.7358 12.9678 c
318.6831 10.4502 318.5562 7.93848 318.3286 5.43359 c
318.1636 3.62305 317.9458 1.80859 317.6743 0 C
271.5479 0 L
271.5479 0 L
398.8218 0 l
398.728 1.7793 398.6392 3.55762 398.5552 5.33887 c
397.8647 5.44922 397.1743 5.56055 396.4849 5.67285 c
380.7603 8.22266 364.9536 10.2871 349.0767 11.6094 c
340.4448 12.3291 331.2866 13 322.1353 13 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.866941 0.207187 1 0.076509 0 0.541176 0.180392 Xa
 0.866941 0.207187 1 0.076509 0 0.541176 0.180392 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
398.5552 5.33887 m
398.6392 3.55762 398.728 1.7793 398.8218 0 C
427.4849 0 l
417.9585 2.28711 408.2134 3.78516 398.5552 5.33887 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.009857 0.864347 0.998199 0.000946 0.929412 0.290196 0.141176 Xa
 0.009857 0.864347 0.998199 0.000946 0.929412 0.290196 0.141176 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
229.9746 165.3975 m
223.9204 164.5957 217.8853 163.6318 211.8755 162.7275 c
202.3853 161.2988 192.9209 159.6934 183.5005 157.8584 c
183.355 154.3369 183.0825 150.8281 182.6147 147.3418 c
181.2007 136.8096 178.1191 126.209 171.7163 117.5625 c
164.4746 107.7822 154.2793 101.3672 143.3789 96.2852 c
124.5654 87.5127 104.0889 82.3115 83.4805 79.2119 c
83.1812 66.8359 84.6631 54.2861 86.5161 42.3242 c
88.3896 30.2236 90.9961 18.248 94.0195 6.37109 c
96.2983 6.16016 98.5762 5.93848 100.853 5.70605 c
113.2627 4.44141 125.8438 3.38965 138.0522 0.723633 c
139.0669 0.501953 140.0693 0.259766 141.0605 0 C
95.6816 0 L
95.6816 0 L
271.5479 0 l
284.7051 9.68164 301.5952 12.6387 318.7358 12.9678 c
318.9155 21.6572 318.2007 30.3965 317.6265 39.0332 c
317.0454 47.7773 316.2017 56.499 315.1304 65.1943 c
312.8052 65.6572 310.4888 66.1426 308.1831 66.6475 c
296.9263 69.1123 285.6255 71.8682 274.5952 75.2197 c
265.4097 78.0088 256.1665 81.3057 248.4097 87.125 c
240.8452 92.7998 235.1162 100.7012 232.2993 109.7627 c
230.5625 115.3486 230.0107 120.8633 229.2739 126.6172 c
228.6357 131.6035 227.564 136.6982 228.2285 141.7324 c
228.7246 149.6143 229.2798 157.5117 229.9746 165.3975 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.397436 0.714992 1 0.471382 0.396078 0.219608 0.054902 Xa
 0.397436 0.714992 1 0.471382 0.396078 0.219608 0.054902 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
251.8765 167.1875 m
250.9707 167.1875 250.062 167.1709 249.146 167.1377 c
242.7417 166.9082 236.3477 166.2422 229.9746 165.3975 c
229.2798 157.5117 228.7246 149.6143 228.2285 141.7324 c
227.564 136.6982 228.6357 131.6035 229.2739 126.6172 c
230.0107 120.8633 230.5625 115.3486 232.2993 109.7627 c
235.1162 100.7012 240.8452 92.7998 248.4097 87.125 c
256.1665 81.3057 265.4097 78.0088 274.5952 75.2197 c
285.6255 71.8682 296.9263 69.1123 308.1831 66.6475 c
310.4888 66.1426 312.8052 65.6572 315.1304 65.1943 c
314.6772 68.8691 314.1841 72.5391 313.6519 76.2041 c
310.1245 100.5107 305.105 126.5654 291.6333 147.541 c
282.4468 161.8389 268.0444 167.1875 251.8765 167.1875 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.241428 0.853819 1 0.183536 0.647059 0.239216 0.027451 Xa
 0.241428 0.853819 1 0.183536 0.647059 0.239216 0.027451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
318.7358 12.9678 m
301.5952 12.6387 284.7051 9.68164 271.5479 0 C
317.6743 0 l
317.9458 1.80859 318.1636 3.62305 318.3286 5.43359 c
318.5562 7.93848 318.6831 10.4502 318.7358 12.9678 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.733181 0.152529 0.012085 0.000031 0 0.658824 0.870588 Xa
 0.733181 0.152529 0.012085 0.000031 0 0.658824 0.870588 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 142.7598 m
0 0 L
26.958 0 L
26.958 0 L
0 0 L
0 4.5498 l
9.01807 7.11133 18.707 8.27344 28.3955 8.73633 c
30.1406 19.7627 31.4712 30.8477 32.4526 41.9707 c
33.3989 52.6943 34.1436 63.8086 33.9844 74.8926 c
33.064 74.8672 32.1436 74.8467 31.2241 74.8291 c
29.8691 74.8037 28.5103 74.7881 27.1494 74.7881 c
18.8691 74.7881 10.521 75.3799 2.64307 78.0791 c
1.75 78.3848 0.870605 78.7256 0 79.084 C
0 142.7598 L
0 142.7598 L
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.000916 0.429114 0.990051 0.000031 0.976471 0.627451 0.105882 Xa
 0.000916 0.429114 0.990051 0.000031 0.976471 0.627451 0.105882 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
111.5762 311.6621 m
102.0161 311.2109 92.46 310.0527 82.9751 309.0371 c
67.1357 307.3408 51.3462 305.1533 35.6836 302.2324 c
31.4609 301.4453 27.1157 300.6113 22.7329 299.6758 c
22.5498 292.623 22.1323 285.5693 20.937 278.6396 c
19.1313 268.1689 15.6548 257.6904 8.93506 249.29 c
6.27393 245.9629 3.26025 243.0693 0 240.5029 C
0 293.5996 L
0 293.5996 L
0 142.7598 l
12.604 138.333 22.6167 130.1309 27.437 116.459 c
32.0903 103.252 33.7798 89.0977 33.9844 74.8926 c
44.6001 75.1836 55.2646 75.9971 65.8184 77.0342 c
71.6929 77.6113 77.5918 78.3262 83.4805 79.2119 c
83.6519 86.3252 84.4121 93.3809 86.0278 100.2344 c
94.5405 136.3418 133.1685 146.5762 164.9175 153.9102 c
171.0884 155.3359 177.2852 156.6475 183.5005 157.8584 c
183.8179 165.5459 183.5298 173.2861 183.3486 180.9404 c
183.0527 193.4043 182.2271 205.8438 180.9644 218.2471 c
180.7031 220.8125 180.4268 223.3975 180.126 225.9951 c
176.3242 226.4434 172.5332 226.9473 168.7612 227.5205 c
159.2705 228.9619 149.6489 230.8965 141.1372 235.541 c
132.8354 240.0703 126.0308 247.0664 121.9414 255.6299 c
119.4204 260.9072 118.0815 266.2861 116.5259 271.874 c
115.1782 276.7168 113.3857 281.6045 113.3203 286.6826 c
112.6436 294.9883 112.0293 303.3203 111.5762 311.6621 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.244511 0.837522 1 0.177768 0.647059 0.254902 0.070588 Xa
 0.244511 0.837522 1 0.177768 0.647059 0.254902 0.070588 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
119.4248 311.856 m
116.8096 311.856 114.1924 311.7852 111.5762 311.6621 c
112.0293 303.3203 112.6436 294.9883 113.3203 286.6826 c
113.3857 281.6045 115.1782 276.7168 116.5259 271.874 c
118.0815 266.2861 119.4204 260.9072 121.9414 255.6299 c
126.0308 247.0664 132.8354 240.0703 141.1372 235.541 c
149.6489 230.8965 159.2705 228.9619 168.7612 227.5205 c
172.5332 226.9473 176.3242 226.4434 180.126 225.9951 c
177.563 248.1406 173.2573 271.1885 162.0107 290.459 c
152.9639 305.959 137.6821 311.7344 120.4004 311.8525 c
120.0757 311.8545 119.75 311.856 119.4248 311.856 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.032776 0.94876 1 0.004425 0.905882 0.180392 0.015686 Xa
 0.032776 0.94876 1 0.004425 0.905882 0.180392 0.015686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
183.5005 157.8584 m
177.2852 156.6475 171.0884 155.3359 164.9175 153.9102 c
133.1685 146.5762 94.5405 136.3418 86.0278 100.2344 c
84.4121 93.3809 83.6519 86.3252 83.4805 79.2119 c
104.0889 82.3115 124.5654 87.5127 143.3789 96.2852 c
154.2793 101.3672 164.4746 107.7822 171.7163 117.5625 c
178.1191 126.209 181.2007 136.8096 182.6147 147.3418 c
183.0825 150.8281 183.355 154.3369 183.5005 157.8584 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.889586 0.327459 1 0.260746 0 0.411765 0.094118 Xa
 0.889586 0.327459 1 0.260746 0 0.411765 0.094118 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 142.7598 m
0 79.084 l
0.870605 78.7256 1.75 78.3848 2.64307 78.0791 c
10.521 75.3799 18.8691 74.7881 27.1494 74.7881 c
28.5103 74.7881 29.8691 74.8037 31.2241 74.8291 c
32.1436 74.8467 33.064 74.8672 33.9844 74.8926 c
33.7798 89.0977 32.0903 103.252 27.437 116.459 c
22.6167 130.1309 12.604 138.333 0 142.7598 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.03299 0.023743 0.926574 0.000031 0.992157 0.913725 0.168627 Xa
 0.03299 0.023743 0.926574 0.000031 0.992157 0.913725 0.168627 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 430.6357 m
0 293.5996 l
7.40967 296.124 15.1294 298.0527 22.7329 299.6758 c
22.8413 303.8555 22.8677 308.0347 22.9243 312.1885 c
23.0942 324.6553 22.7329 337.1157 21.9351 349.5586 c
21.3008 359.4385 20.4478 369.623 18.8857 379.6982 c
13.1621 380.5166 7.45557 381.4473 1.7998 382.5327 c
1.2002 382.6479 0.600098 382.7651 0 382.8848 C
0 430.6357 L
0 430.6357 L
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.002716 0.503838 1 0.000031 0.968627 0.572549 0.019608 Xa
 0.002716 0.503838 1 0.000031 0.968627 0.572549 0.019608 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
22.7329 299.6758 m
15.1294 298.0527 7.40967 296.124 0 293.5996 C
0 240.5029 l
3.26025 243.0693 6.27393 245.9629 8.93506 249.29 c
15.6548 257.6904 19.1313 268.1689 20.937 278.6396 c
22.1323 285.5693 22.5498 292.623 22.7329 299.6758 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.009857 0.864347 0.998199 0.000946 0.929412 0.290196 0.141176 Xa
 0.009857 0.864347 0.998199 0.000946 0.929412 0.290196 0.141176 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
271.5479 595.2754 m
141.0605 595.2754 l
156.5586 591.2192 169.0322 582.4766 174.3398 566.4653 c
178.9751 552.48 180.3086 537.5068 180.0835 522.5596 c
188.2959 523.3062 196.5034 524.3271 204.6392 525.4795 c
217.0483 527.2363 229.543 529.6157 241.7681 532.9312 c
244.7139 549.1831 249.085 565.7539 257.5674 579.8525 c
261.4473 586.2998 266.1934 591.335 271.5479 595.2754 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.35346 0.000336 0.992523 0.000031 0.698039 0.823529 0.207843 Xa
 0.35346 0.000336 0.992523 0.000031 0.698039 0.823529 0.207843 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
398.8218 595.2754 m
317.6743 595.2754 l
316.3618 586.5107 313.7065 577.8789 308.7104 570.4922 c
301.8931 560.4111 291.981 553.5664 281.3071 548.0234 c
268.7974 541.5264 255.4517 536.6426 241.7681 532.9312 c
241.2598 530.126 240.7935 527.3281 240.356 524.5562 c
236.6279 500.9438 235.6948 476.9229 235.293 453.0571 c
235.2271 452.2891 235.2017 451.522 235.2085 450.7549 c
243.2266 450.5347 251.2412 450.1572 259.2466 449.6553 c
271.6968 448.873 284.3081 448.3125 296.6108 446.1221 c
313.6255 443.0928 327.7153 434.8242 334.021 418.0215 c
338.7075 405.5278 340.7202 392.1216 341.3237 378.6006 c
349.7925 377.7412 358.3198 377.249 366.8267 377.249 c
374.2612 377.249 381.6782 377.624 389.0366 378.4575 c
389.8013 382.9585 390.8442 387.3906 392.2358 391.7114 c
401.3677 420.0654 428.521 430.2378 455.5552 435.6162 c
456.9478 440.6865 458.1714 445.8076 459.4321 450.8774 c
462.4409 462.9751 464.9331 475.1909 466.9937 487.4868 c
468.8716 498.6919 470.5601 510.3491 471.1958 522.0288 c
465.3237 522.7505 459.4663 523.5894 453.6587 524.5918 c
444.1997 526.2227 434.6177 528.3506 426.2017 533.165 c
417.9927 537.8604 411.3296 544.9912 407.4126 553.6348 c
404.9985 558.9629 403.7681 564.3672 402.3247 569.9854 c
401.0747 574.8535 399.3804 579.7773 399.4175 584.8555 c
399.2046 588.3247 399.0054 591.7988 398.8218 595.2754 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.41709 0.583917 0.993622 0.325689 0.462745 0.333333 0.137255 Xa
 0.41709 0.583917 0.993622 0.325689 0.462745 0.333333 0.137255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
235.2085 450.7549 m
235.2466 446.4697 236.2974 442.2061 237.0322 438.0059 c
238.0337 432.292 238.8384 426.8086 240.8301 421.3086 c
244.061 412.3862 250.147 404.7568 257.9648 399.436 c
265.981 393.98 275.3662 391.1118 284.6709 388.7485 c
295.8438 385.9082 307.2593 383.6743 318.6177 381.7305 c
326.104 380.4492 333.6919 379.3755 341.3237 378.6006 c
340.7202 392.1216 338.7075 405.5278 334.021 418.0215 c
327.7153 434.8242 313.6255 443.0928 296.6108 446.1221 c
284.3081 448.3125 271.6968 448.873 259.2466 449.6553 c
251.2412 450.1572 243.2266 450.5347 235.2085 450.7549 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.241428 0.853819 1 0.183536 0.647059 0.239216 0.027451 Xa
 0.241428 0.853819 1 0.183536 0.647059 0.239216 0.027451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
317.6743 595.2754 m
271.5479 595.2754 l
266.1934 591.335 261.4473 586.2998 257.5674 579.8525 c
249.085 565.7539 244.7139 549.1831 241.7681 532.9312 c
255.4517 536.6426 268.7974 541.5264 281.3071 548.0234 c
291.981 553.5664 301.8931 560.4111 308.7104 570.4922 c
313.7065 577.8789 316.3618 586.5107 317.6743 595.2754 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.007019 0.541924 0.106325 0.000031 0.945098 0.564706 0.67451 Xa
 0.007019 0.541924 0.106325 0.000031 0.945098 0.564706 0.67451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
95.6816 595.2754 m
26.958 595.2754 l
25.3965 585.8491 23.7505 576.3521 20.7222 567.2979 c
17.3491 557.2207 12.3257 547.3896 4.40967 540.1045 c
2.99561 538.8032 1.51953 537.6079 0 536.4897 C
0 430.6357 l
2.12402 428.2383 4.03662 425.5195 5.68994 422.4272 c
12.7051 409.3037 16.5728 394.6191 18.8857 379.6982 c
24.6191 378.8789 30.3706 378.1729 36.1025 377.5381 c
47.4126 376.2856 58.9194 375.5127 70.4219 375.5127 c
84.8604 375.5127 99.29 376.73 113.3232 379.7471 c
114.9966 391.9609 117.8477 404.0684 123.0649 415.0488 c
132.6797 435.2832 151.0435 443.9814 171.2593 447.8057 c
171.7031 450.1758 172.1348 452.5435 172.5747 454.9014 c
174.8628 467.1567 176.6265 479.4985 177.9551 491.895 c
179.0259 501.8838 179.9282 512.2148 180.0835 522.5596 c
176.7783 522.2588 173.4727 522.0024 170.1704 521.7998 c
166.917 521.5996 163.6377 521.4521 160.3604 521.4521 c
153.9849 521.4521 147.6182 522.0107 141.4771 523.8262 c
132.4077 526.5068 124.2832 531.9141 118.4829 539.4248 c
114.9077 544.0537 112.4668 549.0303 109.77 554.166 c
107.4331 558.6162 104.6519 563.0176 103.519 567.9678 c
100.7852 577.0181 98.127 586.1182 95.6816 595.2754 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.380529 0.909422 0.285832 0.044984 0.627451 0.227451 0.45098 Xa
 0.380529 0.909422 0.285832 0.044984 0.627451 0.227451 0.45098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
171.2593 447.8057 m
151.0435 443.9814 132.6797 435.2832 123.0649 415.0488 c
117.8477 404.0684 114.9966 391.9609 113.3232 379.7471 c
114.2056 379.9365 115.0889 380.1338 115.9678 380.3379 c
127.6836 383.0566 138.9849 387.2256 148.0913 395.2974 c
156.144 402.4331 161.3501 412.168 164.9111 422.1802 c
167.8564 430.4634 169.6387 439.1465 171.2593 447.8057 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.028748 0.581872 1 0.000031 0.937255 0.517647 0.113725 Xa
 0.028748 0.581872 1 0.000031 0.937255 0.517647 0.113725 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 430.6357 m
0 382.8848 l
0.600098 382.7651 1.2002 382.6479 1.7998 382.5327 c
7.45557 381.4473 13.1621 380.5166 18.8857 379.6982 c
16.5728 394.6191 12.7051 409.3037 5.68994 422.4272 c
4.03662 425.5195 2.12402 428.2383 0 430.6357 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.061219 0.963592 1 0.006317 0.878431 0.164706 0.094118 Xa
 0.061219 0.963592 1 0.006317 0.878431 0.164706 0.094118 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
141.0605 595.2754 m
95.6816 595.2754 l
98.127 586.1182 100.7852 577.0181 103.519 567.9678 c
104.6519 563.0176 107.4331 558.6162 109.77 554.166 c
112.4668 549.0303 114.9077 544.0537 118.4829 539.4248 c
124.2832 531.9141 132.4077 526.5068 141.4771 523.8262 c
147.6182 522.0107 153.9849 521.4521 160.3604 521.4521 c
163.6377 521.4521 166.917 521.5996 170.1704 521.7998 c
173.4727 522.0024 176.7783 522.2588 180.0835 522.5596 c
180.3086 537.5068 178.9751 552.48 174.3398 566.4653 c
169.0322 582.4766 156.5586 591.2192 141.0605 595.2754 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.951507 0.640162 0.171847 0.024201 0 0.372549 0.588235 Xa
 0.951507 0.640162 0.171847 0.024201 0 0.372549 0.588235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
26.958 595.2754 m
0 595.2754 L
0 536.4897 l
1.51953 537.6079 2.99561 538.8032 4.40967 540.1045 c
12.3257 547.3896 17.3491 557.2207 20.7222 567.2979 c
23.7505 576.3521 25.3965 585.8491 26.958 595.2754 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.007019 0.541924 0.106325 0.000031 0.945098 0.564706 0.67451 Xa
 0.007019 0.541924 0.106325 0.000031 0.945098 0.564706 0.67451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.5908 9.00391 m
36.5596 9.00391 32.478 8.93164 28.3955 8.73633 c
28.1919 7.45117 27.9829 6.16602 27.7681 4.88184 c
27.4966 3.25879 27.228 1.62988 26.958 0 C
95.6816 0 l
95.1157 2.12012 94.5605 4.24414 94.0195 6.37109 c
80.436 7.62891 66.8159 8.5 53.1763 8.8252 c
49.0781 8.92285 44.8623 9.00391 40.5908 9.00391 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.061219 0.963592 1 0.006317 0.878431 0.164706 0.094118 Xa
 0.061219 0.963592 1 0.006317 0.878431 0.164706 0.094118 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
94.0195 6.37109 m
94.5605 4.24414 95.1157 2.12012 95.6816 0 C
141.0605 0 l
140.0693 0.259766 139.0669 0.501953 138.0522 0.723633 c
125.8438 3.38965 113.2627 4.44141 100.853 5.70605 c
98.5762 5.93848 96.2983 6.16016 94.0195 6.37109 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.951507 0.640162 0.171847 0.024201 0 0.372549 0.588235 Xa
 0.951507 0.640162 0.171847 0.024201 0 0.372549 0.588235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
28.3955 8.73633 m
18.707 8.27344 9.01807 7.11133 0 4.5498 C
0 0 L
26.958 0 l
27.228 1.62988 27.4966 3.25879 27.7681 4.88184 c
27.9829 6.16602 28.1919 7.45117 28.3955 8.73633 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.000916 0.429114 0.990051 0.000031 0.976471 0.627451 0.105882 Xa
 0.000916 0.429114 0.990051 0.000031 0.976471 0.627451 0.105882 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
595.2769 240.5039 m
589.2222 235.7383 582.3013 232.1201 575.0981 229.083 c
565.7417 225.1387 556.021 222.0635 546.106 219.6787 c
546.1958 211.0586 546.9351 202.4385 547.8647 194.0947 c
549.5542 178.9297 552.3853 163.9053 555.7524 149.0059 c
565.8374 148.1846 575.9663 147.2764 585.8726 145.3057 c
589.1323 144.6572 592.2759 143.8135 595.2769 142.7588 C
595.2769 240.5039 L
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.889586 0.327459 1 0.260746 0 0.411765 0.094118 Xa
 0.889586 0.327459 1 0.260746 0 0.411765 0.094118 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
555.7524 149.0059 m
557.6597 140.5654 559.7388 132.1631 561.8804 123.8008 c
562.8003 118.8066 565.3911 114.291 567.5356 109.7441 c
570.0112 104.499 572.2378 99.4229 575.6118 94.6455 c
580.5405 87.667 587.4263 82.3193 595.2769 79.084 C
595.2769 142.7588 l
592.2759 143.8135 589.1323 144.6572 585.8726 145.3057 c
575.9663 147.2764 565.8374 148.1846 555.7524 149.0059 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.007019 0.541924 0.106325 0.000031 0.945098 0.564706 0.67451 Xa
 0.007019 0.541924 0.106325 0.000031 0.945098 0.564706 0.67451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
595.2769 536.4907 m
587.1714 530.5254 577.6694 527.0176 567.8472 524.543 c
560.4419 522.6768 552.9106 521.3281 545.3062 520.4097 c
545.1255 518.7588 544.9565 517.1147 544.7964 515.4785 c
542.5229 492.1846 542.9448 468.6553 543.9136 445.2974 c
547.0063 445.4277 550.0981 445.5068 553.188 445.5068 c
555.521 445.5068 557.853 445.4619 560.1812 445.3589 c
574.0747 444.7446 586.5288 440.5073 595.2769 430.6338 C
595.2769 536.4907 L
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.03299 0.023743 0.926574 0.000031 0.992157 0.913725 0.168627 Xa
 0.03299 0.023743 0.926574 0.000031 0.992157 0.913725 0.168627 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
543.9136 445.2974 m
536.8198 444.9985 529.7271 444.4321 522.6772 443.9429 c
506.7856 442.8384 490.9253 441.2417 475.1646 438.9072 c
468.814 437.9673 462.188 436.936 455.5552 435.6162 c
453.9712 429.8521 452.1685 424.1528 449.8433 418.667 c
445.6968 408.8828 439.9214 399.4746 431.4614 392.8281 c
421.8921 385.3091 410.3638 381.8164 398.5073 379.7964 c
395.3647 379.2607 392.2065 378.8169 389.0366 378.4575 c
386.5522 363.8301 387.019 348.4854 388.0923 333.9473 c
389.3745 316.5542 392.1548 299.2871 395.5269 282.1602 c
395.7026 282.123 395.8784 282.0869 396.0542 282.0498 c
408.2632 279.4873 420.6626 277.1221 432.5229 273.1855 c
448.9263 267.7432 461.6821 257.5361 465.5093 240.0029 c
467.52 230.7813 468.1411 221.2998 467.856 211.7734 c
468.0044 211.7734 468.1519 211.7734 468.3003 211.7734 c
477.8257 211.7734 487.3892 212.167 496.8735 212.7432 c
513.2993 213.7393 529.9595 215.7939 546.106 219.6787 c
545.9917 230.6299 546.9263 241.5811 549.8501 251.9727 c
556.2739 274.8096 574.5562 286.541 595.2769 293.5996 C
595.2769 382.8843 l
586.4399 384.646 577.5796 386.9648 569.7837 391.6211 c
561.6646 396.4697 555.1372 403.7251 551.3833 412.4414 c
549.0698 417.813 547.9409 423.2397 546.604 428.8833 c
545.4458 433.7754 543.8442 438.729 543.9761 443.8057 c
543.9546 444.3032 543.9341 444.7993 543.9136 445.2974 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6365 0.082582 1 0.003937 0.423529 0.686275 0.066667 Xa
 0.6365 0.082582 1 0.003937 0.423529 0.686275 0.066667 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
395.5269 282.1602 m
396.7769 275.8135 398.1069 269.4873 399.4741 263.1787 c
400.2065 258.1533 402.6274 253.5439 404.6011 248.9209 c
406.8784 243.5869 408.9136 238.4307 412.1079 233.5322 c
417.2886 225.5811 424.9546 219.542 433.7808 216.1436 c
442.8296 212.6611 452.6216 212.0088 462.2202 211.8291 c
464.0962 211.7939 465.9771 211.7764 467.856 211.7734 c
468.1411 221.2998 467.52 230.7813 465.5093 240.0029 c
461.6821 257.5361 448.9263 267.7432 432.5229 273.1855 c
420.6626 277.1221 408.2632 279.4873 396.0542 282.0498 c
395.8784 282.0869 395.7026 282.123 395.5269 282.1602 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.361242 0.104219 1 0.000031 0.694118 0.752941 0.035294 Xa
 0.361242 0.104219 1 0.000031 0.694118 0.752941 0.035294 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
455.5552 435.6162 m
428.521 430.2378 401.3677 420.0654 392.2358 391.7114 c
390.8442 387.3906 389.8013 382.9585 389.0366 378.4575 c
392.2065 378.8169 395.3647 379.2607 398.5073 379.7964 c
410.3638 381.8164 421.8921 385.3091 431.4614 392.8281 c
439.9214 399.4746 445.6968 408.8828 449.8433 418.667 c
452.1685 424.1528 453.9712 429.8521 455.5552 435.6162 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.002716 0.503838 1 0.000031 0.968627 0.572549 0.019608 Xa
 0.002716 0.503838 1 0.000031 0.968627 0.572549 0.019608 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
595.2769 293.5996 m
574.5562 286.541 556.2739 274.8096 549.8501 251.9727 c
546.9263 241.5811 545.9917 230.6299 546.106 219.6787 c
556.021 222.0635 565.7417 225.1387 575.0981 229.083 c
582.3013 232.1201 589.2222 235.7383 595.2769 240.5039 C
595.2769 293.5996 L
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.028748 0.581872 1 0.000031 0.937255 0.517647 0.113725 Xa
 0.028748 0.581872 1 0.000031 0.937255 0.517647 0.113725 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
553.188 445.5068 m
550.0981 445.5068 547.0063 445.4277 543.9136 445.2974 c
543.9341 444.7993 543.9546 444.3032 543.9761 443.8057 c
543.8442 438.729 545.4458 433.7754 546.604 428.8833 c
547.9409 423.2397 549.0698 417.813 551.3833 412.4414 c
555.1372 403.7251 561.6646 396.4697 569.7837 391.6211 c
577.5796 386.9648 586.4399 384.646 595.2769 382.8843 C
595.2769 430.6338 l
586.5288 440.5073 574.0747 444.7446 560.1812 445.3589 c
557.853 445.4619 555.521 445.5068 553.188 445.5068 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.733181 0.152529 0.012085 0.000031 0 0.658824 0.870588 Xa
 0.733181 0.152529 0.012085 0.000031 0 0.658824 0.870588 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
583.1938 595.2754 m
427.4868 595.2754 l
429.4409 594.8062 431.3892 594.3154 433.3218 593.771 c
449.9585 589.0894 463.1714 579.48 467.8013 562.1416 c
471.2544 549.1968 471.9351 535.5981 471.1958 522.0288 c
476.811 521.3389 482.4399 520.7568 488.0493 520.2422 c
497.7505 519.3521 507.5923 518.8159 517.439 518.8159 c
526.7573 518.8159 536.0815 519.2959 545.3062 520.4097 c
547.2271 537.9033 550.5239 556.0791 558.7036 571.6958 c
564.6001 582.9546 573.1685 590.3916 583.1938 595.2754 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.866941 0.207187 1 0.076509 0 0.541176 0.180392 Xa
 0.866941 0.207187 1 0.076509 0 0.541176 0.180392 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
427.4868 595.2754 m
398.8218 595.2754 l
399.0054 591.7988 399.2046 588.3247 399.4175 584.8555 c
399.3804 579.7773 401.0747 574.8535 402.3247 569.9854 c
403.7681 564.3672 404.9985 558.9629 407.4126 553.6348 c
411.3296 544.9912 417.9927 537.8604 426.2017 533.165 c
434.6177 528.3506 444.1997 526.2227 453.6587 524.5918 c
459.4663 523.5894 465.3237 522.7505 471.1958 522.0288 c
471.9351 535.5981 471.2544 549.1968 467.8013 562.1416 c
463.1714 579.48 449.9585 589.0894 433.3218 593.771 c
431.3892 594.3154 429.4409 594.8062 427.4868 595.2754 C
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.951507 0.640162 0.171847 0.024201 0 0.372549 0.588235 Xa
 0.951507 0.640162 0.171847 0.024201 0 0.372549 0.588235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
595.2769 595.2754 m
583.1938 595.2754 l
573.1685 590.3916 564.6001 582.9546 558.7036 571.6958 c
550.5239 556.0791 547.2271 537.9033 545.3062 520.4097 c
552.9106 521.3281 560.4419 522.6768 567.8472 524.543 c
577.6694 527.0176 587.1714 530.5254 595.2769 536.4907 C
595.2769 595.2754 L
F
595.2769 4.54004 m
591.0835 3.34863 587.0298 1.86816 583.1948 0 C
595.2769 0 L
595.2769 4.54004 L
F
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
(White)
Pc
(New Pattern Swatch 12) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(New Pattern Swatch 12)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
0 O
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
0 J 0 j 1 w 4 M []0 d0 XR
-0.000488 595.2754 m
-0.000488 0 L
595.2764 0 L
595.2764 595.2754 L
-0.000488 595.2754 L
F
0.733181 0.152529 0.012085 0.000031 0 0.658824 0.870588 Xa
496.5557 151.8232 m
483.8174 151.8232 470.1963 151.4424 457.4219 148.9316 c
455.7676 142.3311 453.9746 135.7656 452.0293 129.2422 c
448.8389 118.5439 445.8096 107.6055 440.9697 97.5068 c
436.376 87.9238 430.1748 78.791 421.418 72.541 c
414.624 67.6914 406.998 64.7764 399.0254 62.9482 c
398.9795 62.3828 398.9336 61.8193 398.8896 61.2559 c
397.4268 42.6709 397.6797 23.9707 398.5547 5.33887 c
408.2129 3.78516 417.958 2.28711 427.4844 0 C
398.8213 0 L
398.8213 0 L
595.2764 0 L
583.1943 0 l
587.0293 1.86816 591.083 3.34863 595.2764 4.54004 C
595.2764 79.084 l
587.4258 82.3193 580.54 87.667 575.6113 94.6455 c
572.2373 99.4229 570.0107 104.499 567.5352 109.7441 c
565.3906 114.291 562.7998 118.8066 561.8799 123.8008 c
559.7383 132.1631 557.6592 140.5654 555.752 149.0059 c
553.3594 149.2002 550.9707 149.3906 548.5869 149.5879 c
532.7119 150.9043 516.793 151.7295 500.8604 151.8105 c
499.4404 151.8174 498.001 151.8232 496.5557 151.8232 C
F
0.351965 0.701686 0.000031 0.000031 0.662745 0.403922 0.666667 Xa
219.3906 450.9766 m
216.7544 450.9766 214.1201 450.9575 211.4844 450.918 c
198.5781 450.7251 184.5195 450.314 171.2588 447.8057 c
169.6382 439.1465 167.856 430.4634 164.9106 422.1802 c
161.3496 412.168 156.1436 402.4331 148.0908 395.2974 c
138.9844 387.2256 127.6831 383.0566 115.9673 380.3379 c
115.0884 380.1338 114.2051 379.9365 113.3228 379.7471 c
112.3403 372.5771 111.7642 365.3716 111.353 358.333 c
110.4443 342.8008 110.7305 327.2134 111.5757 311.6621 c
114.1919 311.7852 116.8091 311.856 119.4243 311.856 c
119.7495 311.856 120.0752 311.8545 120.3999 311.8525 c
137.6816 311.7344 152.9634 305.959 162.0103 290.459 c
173.2568 271.1885 177.5625 248.1406 180.1255 225.9951 c
187.812 225.0889 195.5415 224.4131 203.2324 223.8633 c
211.0991 223.3008 219.0522 222.9717 227.019 222.9717 c
230.9575 222.9717 234.9004 223.0518 238.8379 223.2236 c
242.4937 238.6709 247.5688 254.2432 256.3135 267.3682 c
269.8892 287.7422 291.8271 292.9805 314.4668 292.9805 c
321.1143 292.9805 327.8203 292.5283 334.3945 291.876 c
335.209 296.7388 335.8828 301.6274 336.5938 306.4736 c
338.4033 318.8086 339.6855 331.209 340.5322 343.6484 c
341.3066 355.0366 341.8457 366.8618 341.3232 378.6006 c
333.6914 379.3755 326.1035 380.4492 318.6172 381.7305 c
307.2588 383.6743 295.8433 385.9082 284.6704 388.7485 c
275.3657 391.1118 265.9805 393.98 257.9644 399.436 c
250.1465 404.7568 244.0605 412.3862 240.8296 421.3086 c
238.8379 426.8086 238.0332 432.292 237.0317 438.0059 c
236.2969 442.2061 235.2461 446.4697 235.208 450.7549 c
229.9375 450.8999 224.6631 450.9766 219.3906 450.9766 C
F
0.598413 0.000031 0.807492 0.000031 0.427451 0.752941 0.396078 Xa
334.3945 291.876 m
333.3535 285.6563 332.082 279.4775 330.208 273.4785 c
327.0391 263.3359 322.2139 253.4063 314.4463 245.9629 c
305.6592 237.543 294.5283 232.9375 282.9277 229.7656 c
268.6064 225.8486 253.7578 223.877 238.8379 223.2236 c
238.021 219.7744 237.2759 216.332 236.5757 212.9229 c
233.3569 197.2549 231.3799 181.3467 229.9741 165.3975 c
236.3472 166.2422 242.7412 166.9082 249.1455 167.1377 c
250.0615 167.1709 250.9702 167.1875 251.876 167.1875 c
268.0439 167.1875 282.4463 161.8389 291.6328 147.541 c
305.1045 126.5654 310.124 100.5107 313.6514 76.2041 c
314.1836 72.5391 314.6768 68.8691 315.1299 65.1943 c
331.7393 61.8887 348.8145 59.7266 365.8037 59.7266 c
373.2002 59.7266 380.5791 60.1357 387.8994 61.0391 c
391.6494 61.502 395.374 62.1113 399.0254 62.9482 c
400.5498 81.4541 403.3652 100.9805 411.7383 117.7246 c
421.2344 136.7168 438.3818 145.1895 457.4219 148.9316 c
458.7969 154.4199 460.0762 159.9316 461.2676 165.4648 c
464.4805 180.3848 467.3887 196.1387 467.8555 211.7734 c
465.9766 211.7764 464.0957 211.7939 462.2197 211.8291 c
452.6211 212.0088 442.8291 212.6611 433.7803 216.1436 c
424.9541 219.542 417.2881 225.5811 412.1074 233.5322 c
408.9131 238.4307 406.8779 243.5869 404.6006 248.9209 c
402.627 253.5439 400.2061 258.1533 399.4736 263.1787 c
398.1064 269.4873 396.7764 275.8135 395.5264 282.1602 c
380.1104 285.3838 364.5898 288.1338 348.9688 290.1621 c
344.2432 290.7764 339.3564 291.3838 334.3945 291.876 C
F
0.875364 0.271458 0.787045 0.127657 0 0.494118 0.345098 Xa
457.4219 148.9316 m
438.3818 145.1895 421.2344 136.7168 411.7383 117.7246 c
403.3652 100.9805 400.5498 81.4541 399.0254 62.9482 c
406.998 64.7764 414.624 67.6914 421.418 72.541 c
430.1748 78.791 436.376 87.9238 440.9697 97.5068 c
445.8096 107.6055 448.8389 118.5439 452.0293 129.2422 c
453.9746 135.7656 455.7676 142.3311 457.4219 148.9316 C
F
0.659052 0.52755 0.664271 0.402869 0.282353 0.305882 0.262745 Xa
314.4668 292.9805 m
291.8271 292.9805 269.8892 287.7422 256.3135 267.3682 c
247.5688 254.2432 242.4937 238.6709 238.8379 223.2236 c
253.7578 223.877 268.6064 225.8486 282.9277 229.7656 c
294.5283 232.9375 305.6592 237.543 314.4463 245.9629 c
322.2139 253.4063 327.0391 263.3359 330.208 273.4785 c
332.082 279.4775 333.3535 285.6563 334.3945 291.876 c
327.8203 292.5283 321.1143 292.9805 314.4668 292.9805 C
F
0.35346 0.000336 0.992523 0.000031 0.698039 0.823529 0.207843 Xa
322.1348 13 m
321.001 13 319.8682 12.9893 318.7354 12.9678 c
318.6826 10.4502 318.5557 7.93848 318.3281 5.43359 c
318.1631 3.62305 317.9453 1.80859 317.6738 0 C
271.5474 0 L
271.5474 0 L
398.8213 0 l
398.7275 1.7793 398.6387 3.55762 398.5547 5.33887 c
397.8643 5.44922 397.1738 5.56055 396.4844 5.67285 c
380.7598 8.22266 364.9531 10.2871 349.0762 11.6094 c
340.4443 12.3291 331.2861 13 322.1348 13 C
F
0.866941 0.207187 1 0.076509 0 0.541176 0.180392 Xa
398.5547 5.33887 m
398.6387 3.55762 398.7275 1.7793 398.8213 0 C
427.4844 0 l
417.958 2.28711 408.2129 3.78516 398.5547 5.33887 C
F
0.009857 0.864347 0.998199 0.000946 0.929412 0.290196 0.141176 Xa
229.9741 165.3975 m
223.9199 164.5957 217.8848 163.6318 211.875 162.7275 c
202.3848 161.2988 192.9204 159.6934 183.5 157.8584 c
183.3545 154.3369 183.082 150.8281 182.6143 147.3418 c
181.2002 136.8096 178.1187 126.209 171.7158 117.5625 c
164.4741 107.7822 154.2788 101.3672 143.3784 96.2852 c
124.5649 87.5127 104.0884 82.3115 83.48 79.2119 c
83.1807 66.8359 84.6626 54.2861 86.5156 42.3242 c
88.3892 30.2236 90.9956 18.248 94.019 6.37109 c
96.2979 6.16016 98.5757 5.93848 100.8525 5.70605 c
113.2622 4.44141 125.8433 3.38965 138.0518 0.723633 c
139.0664 0.501953 140.0688 0.259766 141.0601 0 C
95.6812 0 L
95.6812 0 L
271.5474 0 l
284.7046 9.68164 301.5947 12.6387 318.7354 12.9678 c
318.915 21.6572 318.2002 30.3965 317.626 39.0332 c
317.0449 47.7773 316.2012 56.499 315.1299 65.1943 c
312.8047 65.6572 310.4883 66.1426 308.1826 66.6475 c
296.9258 69.1123 285.625 71.8682 274.5947 75.2197 c
265.4092 78.0088 256.166 81.3057 248.4092 87.125 c
240.8447 92.7998 235.1157 100.7012 232.2988 109.7627 c
230.562 115.3486 230.0103 120.8633 229.2734 126.6172 c
228.6353 131.6035 227.5635 136.6982 228.228 141.7324 c
228.7241 149.6143 229.2793 157.5117 229.9741 165.3975 C
F
0.397436 0.714992 1 0.471382 0.396078 0.219608 0.054902 Xa
251.876 167.1875 m
250.9702 167.1875 250.0615 167.1709 249.1455 167.1377 c
242.7412 166.9082 236.3472 166.2422 229.9741 165.3975 c
229.2793 157.5117 228.7241 149.6143 228.228 141.7324 c
227.5635 136.6982 228.6353 131.6035 229.2734 126.6172 c
230.0103 120.8633 230.562 115.3486 232.2988 109.7627 c
235.1157 100.7012 240.8447 92.7998 248.4092 87.125 c
256.166 81.3057 265.4092 78.0088 274.5947 75.2197 c
285.625 71.8682 296.9258 69.1123 308.1826 66.6475 c
310.4883 66.1426 312.8047 65.6572 315.1299 65.1943 c
314.6768 68.8691 314.1836 72.5391 313.6514 76.2041 c
310.124 100.5107 305.1045 126.5654 291.6328 147.541 c
282.4463 161.8389 268.0439 167.1875 251.876 167.1875 C
F
0.241428 0.853819 1 0.183536 0.647059 0.239216 0.027451 Xa
318.7354 12.9678 m
301.5947 12.6387 284.7046 9.68164 271.5474 0 C
317.6738 0 l
317.9453 1.80859 318.1631 3.62305 318.3281 5.43359 c
318.5557 7.93848 318.6826 10.4502 318.7354 12.9678 C
F
0.733181 0.152529 0.012085 0.000031 0 0.658824 0.870588 Xa
-0.000488 142.7598 m
-0.000488 0 L
26.9575 0 L
26.9575 0 L
-0.000488 0 L
-0.000488 4.5498 l
9.01758 7.11133 18.7065 8.27344 28.395 8.73633 c
30.1401 19.7627 31.4707 30.8477 32.4521 41.9707 c
33.3984 52.6943 34.1431 63.8086 33.9839 74.8926 c
33.0635 74.8672 32.1431 74.8467 31.2236 74.8291 c
29.8687 74.8037 28.5098 74.7881 27.1489 74.7881 c
18.8687 74.7881 10.5205 75.3799 2.64258 78.0791 c
1.74951 78.3848 0.870117 78.7256 -0.000488 79.084 C
-0.000488 142.7598 L
-0.000488 142.7598 L
F
0.000916 0.429114 0.990051 0.000031 0.976471 0.627451 0.105882 Xa
111.5757 311.6621 m
102.0156 311.2109 92.4595 310.0527 82.9746 309.0371 c
67.1353 307.3408 51.3457 305.1533 35.6831 302.2324 c
31.4604 301.4453 27.1152 300.6113 22.7324 299.6758 c
22.5493 292.623 22.1318 285.5693 20.9365 278.6396 c
19.1309 268.1689 15.6543 257.6904 8.93457 249.29 c
6.27344 245.9629 3.25977 243.0693 -0.000488 240.5029 C
-0.000488 293.5996 L
-0.000488 293.5996 L
-0.000488 142.7598 l
12.6035 138.333 22.6162 130.1309 27.4365 116.459 c
32.0898 103.252 33.7793 89.0977 33.9839 74.8926 c
44.5996 75.1836 55.2642 75.9971 65.8179 77.0342 c
71.6924 77.6113 77.5913 78.3262 83.48 79.2119 c
83.6514 86.3252 84.4116 93.3809 86.0273 100.2344 c
94.54 136.3418 133.168 146.5762 164.917 153.9102 c
171.0879 155.3359 177.2847 156.6475 183.5 157.8584 c
183.8174 165.5459 183.5293 173.2861 183.3481 180.9404 c
183.0522 193.4043 182.2266 205.8438 180.9639 218.2471 c
180.7026 220.8125 180.4263 223.3975 180.1255 225.9951 c
176.3237 226.4434 172.5327 226.9473 168.7607 227.5205 c
159.27 228.9619 149.6484 230.8965 141.1367 235.541 c
132.835 240.0703 126.0303 247.0664 121.9409 255.6299 c
119.4199 260.9072 118.0811 266.2861 116.5254 271.874 c
115.1777 276.7168 113.3853 281.6045 113.3198 286.6826 c
112.6431 294.9883 112.0288 303.3203 111.5757 311.6621 C
F
0.244511 0.837522 1 0.177768 0.647059 0.254902 0.070588 Xa
119.4243 311.856 m
116.8091 311.856 114.1919 311.7852 111.5757 311.6621 c
112.0288 303.3203 112.6431 294.9883 113.3198 286.6826 c
113.3853 281.6045 115.1777 276.7168 116.5254 271.874 c
118.0811 266.2861 119.4199 260.9072 121.9409 255.6299 c
126.0303 247.0664 132.835 240.0703 141.1367 235.541 c
149.6484 230.8965 159.27 228.9619 168.7607 227.5205 c
172.5327 226.9473 176.3237 226.4434 180.1255 225.9951 c
177.5625 248.1406 173.2568 271.1885 162.0103 290.459 c
152.9634 305.959 137.6816 311.7344 120.3999 311.8525 c
120.0752 311.8545 119.7495 311.856 119.4243 311.856 C
F
0.032776 0.94876 1 0.004425 0.905882 0.180392 0.015686 Xa
183.5 157.8584 m
177.2847 156.6475 171.0879 155.3359 164.917 153.9102 c
133.168 146.5762 94.54 136.3418 86.0273 100.2344 c
84.4116 93.3809 83.6514 86.3252 83.48 79.2119 c
104.0884 82.3115 124.5649 87.5127 143.3784 96.2852 c
154.2788 101.3672 164.4741 107.7822 171.7158 117.5625 c
178.1187 126.209 181.2002 136.8096 182.6143 147.3418 c
183.082 150.8281 183.3545 154.3369 183.5 157.8584 C
F
0.889586 0.327459 1 0.260746 0 0.411765 0.094118 Xa
-0.000488 142.7598 m
-0.000488 79.084 l
0.870117 78.7256 1.74951 78.3848 2.64258 78.0791 c
10.5205 75.3799 18.8687 74.7881 27.1489 74.7881 c
28.5098 74.7881 29.8687 74.8037 31.2236 74.8291 c
32.1431 74.8467 33.0635 74.8672 33.9839 74.8926 c
33.7793 89.0977 32.0898 103.252 27.4365 116.459 c
22.6162 130.1309 12.6035 138.333 -0.000488 142.7598 C
F
0.03299 0.023743 0.926574 0.000031 0.992157 0.913725 0.168627 Xa
-0.000488 430.6357 m
-0.000488 293.5996 l
7.40918 296.124 15.1289 298.0527 22.7324 299.6758 c
22.8408 303.8555 22.8672 308.0347 22.9238 312.1885 c
23.0938 324.6553 22.7324 337.1157 21.9346 349.5586 c
21.3003 359.4385 20.4473 369.623 18.8853 379.6982 c
13.1616 380.5166 7.45508 381.4473 1.79932 382.5327 c
1.19971 382.6479 0.599609 382.7651 -0.000488 382.8848 C
-0.000488 430.6357 L
-0.000488 430.6357 L
F
0.002716 0.503838 1 0.000031 0.968627 0.572549 0.019608 Xa
22.7324 299.6758 m
15.1289 298.0527 7.40918 296.124 -0.000488 293.5996 C
-0.000488 240.5029 l
3.25977 243.0693 6.27344 245.9629 8.93457 249.29 c
15.6543 257.6904 19.1309 268.1689 20.9365 278.6396 c
22.1318 285.5693 22.5493 292.623 22.7324 299.6758 C
F
0.009857 0.864347 0.998199 0.000946 0.929412 0.290196 0.141176 Xa
271.5474 595.2754 m
141.0601 595.2754 l
156.5581 591.2192 169.0317 582.4766 174.3394 566.4653 c
178.9746 552.48 180.3081 537.5068 180.083 522.5596 c
188.2954 523.3062 196.5029 524.3271 204.6387 525.4795 c
217.0479 527.2363 229.5425 529.6157 241.7676 532.9312 c
244.7134 549.1831 249.0845 565.7539 257.5669 579.8525 c
261.4468 586.2998 266.1929 591.335 271.5474 595.2754 C
F
0.35346 0.000336 0.992523 0.000031 0.698039 0.823529 0.207843 Xa
398.8213 595.2754 m
317.6738 595.2754 l
316.3613 586.5107 313.7061 577.8789 308.71 570.4922 c
301.8926 560.4111 291.9805 553.5664 281.3066 548.0234 c
268.7969 541.5264 255.4512 536.6426 241.7676 532.9312 c
241.2593 530.126 240.793 527.3281 240.3555 524.5562 c
236.6274 500.9438 235.6943 476.9229 235.2925 453.0571 c
235.2266 452.2891 235.2012 451.522 235.208 450.7549 c
243.2261 450.5347 251.2407 450.1572 259.2461 449.6553 c
271.6963 448.873 284.3076 448.3125 296.6104 446.1221 c
313.625 443.0928 327.7148 434.8242 334.0205 418.0215 c
338.707 405.5278 340.7197 392.1216 341.3232 378.6006 c
349.792 377.7412 358.3193 377.249 366.8262 377.249 c
374.2607 377.249 381.6777 377.624 389.0361 378.4575 c
389.8008 382.9585 390.8438 387.3906 392.2354 391.7114 c
401.3672 420.0654 428.5205 430.2378 455.5547 435.6162 c
456.9473 440.6865 458.1709 445.8076 459.4316 450.8774 c
462.4404 462.9751 464.9326 475.1909 466.9932 487.4868 c
468.8711 498.6919 470.5596 510.3491 471.1953 522.0288 c
465.3232 522.7505 459.4658 523.5894 453.6582 524.5918 c
444.1992 526.2227 434.6172 528.3506 426.2012 533.165 c
417.9922 537.8604 411.3291 544.9912 407.4121 553.6348 c
404.998 558.9629 403.7676 564.3672 402.3242 569.9854 c
401.0742 574.8535 399.3799 579.7773 399.417 584.8555 c
399.2041 588.3247 399.0049 591.7988 398.8213 595.2754 C
F
0.41709 0.583917 0.993622 0.325689 0.462745 0.333333 0.137255 Xa
235.208 450.7549 m
235.2461 446.4697 236.2969 442.2061 237.0317 438.0059 c
238.0332 432.292 238.8379 426.8086 240.8296 421.3086 c
244.0605 412.3862 250.1465 404.7568 257.9644 399.436 c
265.9805 393.98 275.3657 391.1118 284.6704 388.7485 c
295.8433 385.9082 307.2588 383.6743 318.6172 381.7305 c
326.1035 380.4492 333.6914 379.3755 341.3232 378.6006 c
340.7197 392.1216 338.707 405.5278 334.0205 418.0215 c
327.7148 434.8242 313.625 443.0928 296.6104 446.1221 c
284.3076 448.3125 271.6963 448.873 259.2461 449.6553 c
251.2407 450.1572 243.2261 450.5347 235.208 450.7549 C
F
0.241428 0.853819 1 0.183536 0.647059 0.239216 0.027451 Xa
317.6738 595.2754 m
271.5474 595.2754 l
266.1929 591.335 261.4468 586.2998 257.5669 579.8525 c
249.0845 565.7539 244.7134 549.1831 241.7676 532.9312 c
255.4512 536.6426 268.7969 541.5264 281.3066 548.0234 c
291.9805 553.5664 301.8926 560.4111 308.71 570.4922 c
313.7061 577.8789 316.3613 586.5107 317.6738 595.2754 C
F
0.007019 0.541924 0.106325 0.000031 0.945098 0.564706 0.67451 Xa
95.6812 595.2754 m
26.9575 595.2754 l
25.396 585.8491 23.75 576.3521 20.7217 567.2979 c
17.3486 557.2207 12.3252 547.3896 4.40918 540.1045 c
2.99512 538.8032 1.51904 537.6079 -0.000488 536.4897 C
-0.000488 430.6357 l
2.12354 428.2383 4.03613 425.5195 5.68945 422.4272 c
12.7046 409.3037 16.5723 394.6191 18.8853 379.6982 c
24.6187 378.8789 30.3701 378.1729 36.1021 377.5381 c
47.4121 376.2856 58.9189 375.5127 70.4214 375.5127 c
84.8599 375.5127 99.2896 376.73 113.3228 379.7471 c
114.9961 391.9609 117.8472 404.0684 123.0645 415.0488 c
132.6792 435.2832 151.043 443.9814 171.2588 447.8057 c
171.7026 450.1758 172.1343 452.5435 172.5742 454.9014 c
174.8623 467.1567 176.626 479.4985 177.9546 491.895 c
179.0254 501.8838 179.9277 512.2148 180.083 522.5596 c
176.7778 522.2588 173.4722 522.0024 170.1699 521.7998 c
166.9165 521.5996 163.6372 521.4521 160.3599 521.4521 c
153.9844 521.4521 147.6177 522.0107 141.4766 523.8262 c
132.4072 526.5068 124.2827 531.9141 118.4824 539.4248 c
114.9072 544.0537 112.4663 549.0303 109.7695 554.166 c
107.4326 558.6162 104.6514 563.0176 103.5186 567.9678 c
100.7847 577.0181 98.1265 586.1182 95.6812 595.2754 C
F
0.380529 0.909422 0.285832 0.044984 0.627451 0.227451 0.45098 Xa
171.2588 447.8057 m
151.043 443.9814 132.6792 435.2832 123.0645 415.0488 c
117.8472 404.0684 114.9961 391.9609 113.3228 379.7471 c
114.2051 379.9365 115.0884 380.1338 115.9673 380.3379 c
127.6831 383.0566 138.9844 387.2256 148.0908 395.2974 c
156.1436 402.4331 161.3496 412.168 164.9106 422.1802 c
167.856 430.4634 169.6382 439.1465 171.2588 447.8057 C
F
0.028748 0.581872 1 0.000031 0.937255 0.517647 0.113725 Xa
-0.000488 430.6357 m
-0.000488 382.8848 l
0.599609 382.7651 1.19971 382.6479 1.79932 382.5327 c
7.45508 381.4473 13.1616 380.5166 18.8853 379.6982 c
16.5723 394.6191 12.7046 409.3037 5.68945 422.4272 c
4.03613 425.5195 2.12354 428.2383 -0.000488 430.6357 C
F
0.061219 0.963592 1 0.006317 0.878431 0.164706 0.094118 Xa
141.0601 595.2754 m
95.6812 595.2754 l
98.1265 586.1182 100.7847 577.0181 103.5186 567.9678 c
104.6514 563.0176 107.4326 558.6162 109.7695 554.166 c
112.4663 549.0303 114.9072 544.0537 118.4824 539.4248 c
124.2827 531.9141 132.4072 526.5068 141.4766 523.8262 c
147.6177 522.0107 153.9844 521.4521 160.3599 521.4521 c
163.6372 521.4521 166.9165 521.5996 170.1699 521.7998 c
173.4722 522.0024 176.7778 522.2588 180.083 522.5596 c
180.3081 537.5068 178.9746 552.48 174.3394 566.4653 c
169.0317 582.4766 156.5581 591.2192 141.0601 595.2754 C
F
0.951507 0.640162 0.171847 0.024201 0 0.372549 0.588235 Xa
26.9575 595.2754 m
-0.000488 595.2754 L
-0.000488 536.4897 l
1.51904 537.6079 2.99512 538.8032 4.40918 540.1045 c
12.3252 547.3896 17.3486 557.2207 20.7217 567.2979 c
23.75 576.3521 25.396 585.8491 26.9575 595.2754 C
F
0.007019 0.541924 0.106325 0.000031 0.945098 0.564706 0.67451 Xa
40.5903 9.00391 m
36.5591 9.00391 32.4775 8.93164 28.395 8.73633 c
28.1914 7.45117 27.9824 6.16602 27.7676 4.88184 c
27.4961 3.25879 27.2275 1.62988 26.9575 0 C
95.6812 0 l
95.1152 2.12012 94.5601 4.24414 94.019 6.37109 c
80.4355 7.62891 66.8154 8.5 53.1758 8.8252 c
49.0776 8.92285 44.8618 9.00391 40.5903 9.00391 C
F
0.061219 0.963592 1 0.006317 0.878431 0.164706 0.094118 Xa
94.019 6.37109 m
94.5601 4.24414 95.1152 2.12012 95.6812 0 C
141.0601 0 l
140.0688 0.259766 139.0664 0.501953 138.0518 0.723633 c
125.8433 3.38965 113.2622 4.44141 100.8525 5.70605 c
98.5757 5.93848 96.2979 6.16016 94.019 6.37109 C
F
0.951507 0.640162 0.171847 0.024201 0 0.372549 0.588235 Xa
28.395 8.73633 m
18.7065 8.27344 9.01758 7.11133 -0.000488 4.5498 C
-0.000488 0 L
26.9575 0 l
27.2275 1.62988 27.4961 3.25879 27.7676 4.88184 c
27.9824 6.16602 28.1914 7.45117 28.395 8.73633 C
F
0.000916 0.429114 0.990051 0.000031 0.976471 0.627451 0.105882 Xa
595.2764 240.5039 m
589.2217 235.7383 582.3008 232.1201 575.0977 229.083 c
565.7412 225.1387 556.0205 222.0635 546.1055 219.6787 c
546.1953 211.0586 546.9346 202.4385 547.8643 194.0947 c
549.5537 178.9297 552.3848 163.9053 555.752 149.0059 c
565.8369 148.1846 575.9658 147.2764 585.8721 145.3057 c
589.1318 144.6572 592.2754 143.8135 595.2764 142.7588 C
595.2764 240.5039 L
F
0.889586 0.327459 1 0.260746 0 0.411765 0.094118 Xa
555.752 149.0059 m
557.6592 140.5654 559.7383 132.1631 561.8799 123.8008 c
562.7998 118.8066 565.3906 114.291 567.5352 109.7441 c
570.0107 104.499 572.2373 99.4229 575.6113 94.6455 c
580.54 87.667 587.4258 82.3193 595.2764 79.084 C
595.2764 142.7588 l
592.2754 143.8135 589.1318 144.6572 585.8721 145.3057 c
575.9658 147.2764 565.8369 148.1846 555.752 149.0059 C
F
0.007019 0.541924 0.106325 0.000031 0.945098 0.564706 0.67451 Xa
595.2764 536.4907 m
587.1709 530.5254 577.6689 527.0176 567.8467 524.543 c
560.4414 522.6768 552.9102 521.3281 545.3057 520.4097 c
545.125 518.7588 544.9561 517.1147 544.7959 515.4785 c
542.5225 492.1846 542.9443 468.6553 543.9131 445.2974 c
547.0059 445.4277 550.0977 445.5068 553.1875 445.5068 c
555.5205 445.5068 557.8525 445.4619 560.1807 445.3589 c
574.0742 444.7446 586.5283 440.5073 595.2764 430.6338 C
595.2764 536.4907 L
F
0.03299 0.023743 0.926574 0.000031 0.992157 0.913725 0.168627 Xa
543.9131 445.2974 m
536.8193 444.9985 529.7266 444.4321 522.6768 443.9429 c
506.7852 442.8384 490.9248 441.2417 475.1641 438.9072 c
468.8135 437.9673 462.1875 436.936 455.5547 435.6162 c
453.9707 429.8521 452.168 424.1528 449.8428 418.667 c
445.6963 408.8828 439.9209 399.4746 431.4609 392.8281 c
421.8916 385.3091 410.3633 381.8164 398.5068 379.7964 c
395.3643 379.2607 392.2061 378.8169 389.0361 378.4575 c
386.5518 363.8301 387.0186 348.4854 388.0918 333.9473 c
389.374 316.5542 392.1543 299.2871 395.5264 282.1602 c
395.7021 282.123 395.8779 282.0869 396.0537 282.0498 c
408.2627 279.4873 420.6621 277.1221 432.5225 273.1855 c
448.9258 267.7432 461.6816 257.5361 465.5088 240.0029 c
467.5195 230.7813 468.1406 221.2998 467.8555 211.7734 c
468.0039 211.7734 468.1514 211.7734 468.2998 211.7734 c
477.8252 211.7734 487.3887 212.167 496.873 212.7432 c
513.2988 213.7393 529.959 215.7939 546.1055 219.6787 c
545.9912 230.6299 546.9258 241.5811 549.8496 251.9727 c
556.2734 274.8096 574.5557 286.541 595.2764 293.5996 C
595.2764 382.8843 l
586.4395 384.646 577.5791 386.9648 569.7832 391.6211 c
561.6641 396.4697 555.1367 403.7251 551.3828 412.4414 c
549.0693 417.813 547.9404 423.2397 546.6035 428.8833 c
545.4453 433.7754 543.8438 438.729 543.9756 443.8057 c
543.9541 444.3032 543.9336 444.7993 543.9131 445.2974 C
F
0.6365 0.082582 1 0.003937 0.423529 0.686275 0.066667 Xa
395.5264 282.1602 m
396.7764 275.8135 398.1064 269.4873 399.4736 263.1787 c
400.2061 258.1533 402.627 253.5439 404.6006 248.9209 c
406.8779 243.5869 408.9131 238.4307 412.1074 233.5322 c
417.2881 225.5811 424.9541 219.542 433.7803 216.1436 c
442.8291 212.6611 452.6211 212.0088 462.2197 211.8291 c
464.0957 211.7939 465.9766 211.7764 467.8555 211.7734 c
468.1406 221.2998 467.5195 230.7813 465.5088 240.0029 c
461.6816 257.5361 448.9258 267.7432 432.5225 273.1855 c
420.6621 277.1221 408.2627 279.4873 396.0537 282.0498 c
395.8779 282.0869 395.7021 282.123 395.5264 282.1602 C
F
0.361242 0.104219 1 0.000031 0.694118 0.752941 0.035294 Xa
455.5547 435.6162 m
428.5205 430.2378 401.3672 420.0654 392.2354 391.7114 c
390.8438 387.3906 389.8008 382.9585 389.0361 378.4575 c
392.2061 378.8169 395.3643 379.2607 398.5068 379.7964 c
410.3633 381.8164 421.8916 385.3091 431.4609 392.8281 c
439.9209 399.4746 445.6963 408.8828 449.8428 418.667 c
452.168 424.1528 453.9707 429.8521 455.5547 435.6162 C
F
0.002716 0.503838 1 0.000031 0.968627 0.572549 0.019608 Xa
595.2764 293.5996 m
574.5557 286.541 556.2734 274.8096 549.8496 251.9727 c
546.9258 241.5811 545.9912 230.6299 546.1055 219.6787 c
556.0205 222.0635 565.7412 225.1387 575.0977 229.083 c
582.3008 232.1201 589.2217 235.7383 595.2764 240.5039 C
595.2764 293.5996 L
F
0.028748 0.581872 1 0.000031 0.937255 0.517647 0.113725 Xa
553.1875 445.5068 m
550.0977 445.5068 547.0059 445.4277 543.9131 445.2974 c
543.9336 444.7993 543.9541 444.3032 543.9756 443.8057 c
543.8438 438.729 545.4453 433.7754 546.6035 428.8833 c
547.9404 423.2397 549.0693 417.813 551.3828 412.4414 c
555.1367 403.7251 561.6641 396.4697 569.7832 391.6211 c
577.5791 386.9648 586.4395 384.646 595.2764 382.8843 C
595.2764 430.6338 l
586.5283 440.5073 574.0742 444.7446 560.1807 445.3589 c
557.8525 445.4619 555.5205 445.5068 553.1875 445.5068 C
F
0.733181 0.152529 0.012085 0.000031 0 0.658824 0.870588 Xa
583.1934 595.2754 m
427.4863 595.2754 l
429.4404 594.8062 431.3887 594.3154 433.3213 593.771 c
449.958 589.0894 463.1709 579.48 467.8008 562.1416 c
471.2539 549.1968 471.9346 535.5981 471.1953 522.0288 c
476.8105 521.3389 482.4395 520.7568 488.0488 520.2422 c
497.75 519.3521 507.5918 518.8159 517.4385 518.8159 c
526.7568 518.8159 536.0811 519.2959 545.3057 520.4097 c
547.2266 537.9033 550.5234 556.0791 558.7031 571.6958 c
564.5996 582.9546 573.168 590.3916 583.1934 595.2754 C
F
0.866941 0.207187 1 0.076509 0 0.541176 0.180392 Xa
427.4863 595.2754 m
398.8213 595.2754 l
399.0049 591.7988 399.2041 588.3247 399.417 584.8555 c
399.3799 579.7773 401.0742 574.8535 402.3242 569.9854 c
403.7676 564.3672 404.998 558.9629 407.4121 553.6348 c
411.3291 544.9912 417.9922 537.8604 426.2012 533.165 c
434.6172 528.3506 444.1992 526.2227 453.6582 524.5918 c
459.4658 523.5894 465.3232 522.7505 471.1953 522.0288 c
471.9346 535.5981 471.2539 549.1968 467.8008 562.1416 c
463.1709 579.48 449.958 589.0894 433.3213 593.771 c
431.3887 594.3154 429.4404 594.8062 427.4863 595.2754 C
F
0.951507 0.640162 0.171847 0.024201 0 0.372549 0.588235 Xa
595.2764 595.2754 m
583.1934 595.2754 l
573.168 590.3916 564.5996 582.9546 558.7031 571.6958 c
550.5234 556.0791 547.2266 537.9033 545.3057 520.4097 c
552.9102 521.3281 560.4414 522.6768 567.8467 524.543 c
577.6689 527.0176 587.1709 530.5254 595.2764 536.4907 C
595.2764 595.2754 L
F
595.2764 4.54004 m
591.083 3.34863 587.0293 1.86816 583.1943 0 C
595.2764 0 L
595.2764 4.54004 L
F
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
